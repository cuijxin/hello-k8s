definitions:
  common.ConfigMapArg:
    properties:
      items:
        description: Items ConfigMap 对象 配置项
        items:
          $ref: '#/definitions/common.ConfigMapItem'
        type: array
    type: object
  common.ConfigMapItem:
    properties:
      key:
        description: Key 配置项的 Key.
        type: string
      value:
        description: Value 配置项的 Value. 目前只支持base64格式编码的字符串.
        type: string
    type: object
  common.CustomRootPasswordArg:
    properties:
      value:
        description: SecretValue
        type: string
    type: object
  common.DataVolumeArg:
    properties:
      accessModes:
        description: AccessModes 访问模式
        items:
          type: string
        type: array
      capacity:
        description: Capacity 存储容量
        type: number
      storageClassName:
        description: StorageClassName 存储类名称
        type: string
    type: object
  config.HelmConfig:
    properties:
      helmRepos:
        type: string
    type: object
  configmap.ConfigMapItem:
    properties:
      key:
        description: Key 配置项的 Key.
        type: string
      value:
        description: Value 配置项的 Value. 目前只支持base64格式编码的字符串.
        type: string
    type: object
  configmap.CreateConfigMapRequest:
    properties:
      item:
        description: ConfigMapItems 配置项数组.
        items:
          $ref: '#/definitions/configmap.ConfigMapItem'
        type: array
      name:
        description: Name ConfigMap对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  configmap.DeleteConfigMapRequest:
    properties:
      name:
        description: ConfigMap 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  cronjob.CreateCronJobRequest:
    properties:
      cronjob:
        $ref: '#/definitions/cronjob.CronJobArgs'
        type: object
      name:
        description: Name CronJob 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  cronjob.CronJobArgs:
    properties:
      jobTemplate:
        $ref: '#/definitions/model.JobArgs'
        type: object
      schedule:
        description: The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        type: string
    type: object
  cronjob.DeleteCronJobRequest:
    properties:
      name:
        description: CronJob 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  deployment.ConfigVariable:
    properties:
      mountPath:
        description: MountPath 配置文件挂载路径，代表这个服务如果想要成功运行，需要到那个路径下去获取这个配置文件.
        type: string
      name:
        description: Name 一个ConfigMap对象的名称，必须是与应用同命名空间下的一个可用ConfigMap对象的名称.
        type: string
      readOnly:
        description: ReadOnly
        type: boolean
    type: object
  deployment.DeleteDeploymentRequest:
    properties:
      name:
        description: Name Deployment对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  deployment.EnvironmentVariable:
    properties:
      name:
        description: Name of the variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: Value of the variable, as defined in Kubernetes core API.
        type: string
    type: object
  deployment.Label:
    properties:
      key:
        description: Label key
        type: string
      value:
        description: Label value
        type: string
    type: object
  deployment.PersistentVolumeClaimVariable:
    properties:
      mountPath:
        description: MountPath 持久化存储挂载路径.
        type: string
      name:
        description: Name 一个 PersistentVolumeClaim 对象的名称，必须是与应用同命名空间下的一个可用 PersistentVolumeClaim
          对象的名称.
        type: string
      readOnly:
        description: ReadOnly
        type: boolean
    type: object
  job.CreateJobRequest:
    properties:
      jobTemplate:
        $ref: '#/definitions/model.JobArgs'
        description: Job 对象参数.
        type: object
      name:
        description: Name Job 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  job.DeleteJobRequest:
    properties:
      name:
        description: Job 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  model.JobArgs:
    properties:
      activeDeadlineSeconds:
        description: |-
          Specifies the duration in seconds relative to the startTime that the job may be active
          before the system tries to terminate it; value must be positive integer
          +optional
        type: integer
      completions:
        description: |-
          Specifies the desired number of successfully finished pods the
          job should be run with.  Setting to nil means that the success of any
          pod signals the success of all pods, and allows parallelism to have any positive
          value.  Setting to 1 means that parallelism is limited to 1 and the success of that
          pod signals the success of the job.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
        type: integer
      parallelism:
        description: |-
          Specifies the maximum desired number of pods the job should
          run at any given time. The actual number of pods running in steady state will
          be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
          i.e. when the work left to do is less than max parallelism.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
        type: integer
      podTemplate:
        $ref: '#/definitions/model.PodArgs'
        description: PodTemplate 定义了 Job 对象管理的 Pod 对象的定义参数.
        type: object
    type: object
  model.PodArgs:
    properties:
      configmaps:
        description: List of user-defined configmap variables.
        items:
          $ref: '#/definitions/deployment.ConfigVariable'
        type: array
      containerCommand:
        description: Command that is executed instead of container entrypoint, if
          specified.
        items:
          type: string
        type: array
      containerCommandArgs:
        description: |-
          Arguments for the specified container command or container entrypoint (if command is not
          specified here).
        items:
          type: string
        type: array
      containerImage:
        description: Docker image path for the application.
        type: string
      cpuRequirement:
        description: Optional CPU requirement for the container.
        type: number
      labels:
        description: Labels that will be defined on Pods/RCs/Services
        items:
          $ref: '#/definitions/deployment.Label'
        type: array
      memoryRequirement:
        description: Optional memory requirement for the container.
        type: number
      pvcs:
        description: List of user-defined PersistentVolumeClaim variables.
        items:
          $ref: '#/definitions/deployment.PersistentVolumeClaimVariable'
        type: array
      restartPolicy:
        description: |-
          Restart policy for all containers within the pod.
          One of Always, OnFailure, Never.
        type: string
      variables:
        description: List of user-defined environment variables.
        items:
          $ref: '#/definitions/deployment.EnvironmentVariable'
        type: array
    type: object
  mysql5.ClusterOptions:
    properties:
      backupvolume:
        $ref: '#/definitions/common.DataVolumeArg'
        description: BackupVolume 用户自定义备份数据持久化存储参数.
        type: object
      clusterId:
        description: ClusterID Kubernetes 集群ID.
        type: string
      config:
        $ref: '#/definitions/common.ConfigMapArg'
        description: Config 用户自定义配置文件.
        type: object
      datavolume:
        $ref: '#/definitions/common.DataVolumeArg'
        description: DataVolume 用户定义持久化存储参数.
        type: object
      dbName:
        description: InitDBName 用户初始化数据库名称.
        type: string
      isExport:
        description: IsExport 是否开放公开服务.
        type: boolean
      members:
        description: Members MySQL集群节点数.
        type: integer
      name:
        description: Name MySQL 集群名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
      rootpassword:
        $ref: '#/definitions/common.CustomRootPasswordArg'
        description: RootPassword 用户自定义root密码.
        type: object
    type: object
  mysql5.DeleteClusterOptions:
    properties:
      clusterId:
        description: Kubernetes 集群ID.
        type: string
      name:
        description: MySQL 集群名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  persistentvolumeclaim.CreatePersistentVolumeClaimRequest:
    properties:
      AccessModes:
        description: AccessModes 存储的访问模式.
        items:
          type: string
        type: array
      name:
        description: Name PersistentVolumeClaim对象名称
        type: string
      namespace:
        description: Namespace 命名空间
        type: string
      storageCapacity:
        description: StorageCapacity 申请存储容量.
        type: number
      storageClassName:
        description: StoraegClassName 存储类名称.
        type: string
    type: object
  persistentvolumeclaim.DeletePersistentVolumeClaimRequest:
    properties:
      name:
        description: Secret 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  postgres.CreateClusterOptions:
    properties:
      clusterId:
        type: string
      databases:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      namespace:
        type: string
      pgparams:
        $ref: '#/definitions/postgres.PostgresqlParam'
        type: object
      replicas:
        type: integer
      teamId:
        type: string
      users:
        additionalProperties:
          $ref: '#/definitions/postgres.UserFlags'
        type: object
      volume:
        $ref: '#/definitions/postgres.Volume'
        type: object
    type: object
  postgres.PostgresqlParam:
    properties:
      parameters:
        additionalProperties:
          type: string
        type: object
      version:
        type: string
    type: object
  postgres.UserFlags:
    items:
      type: string
    type: array
  postgres.Volume:
    properties:
      size:
        type: string
      storageClass:
        type: string
    type: object
  secret.CreateSecretRequest:
    properties:
      item:
        description: SecretItems Secret 信息
        items:
          $ref: '#/definitions/secret.SecretItem'
        type: array
      name:
        description: Name Secret 对象的名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  secret.DeleteSecretRequest:
    properties:
      name:
        description: Name Secret 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  secret.SecretItem:
    properties:
      key:
        description: Key secret item key.
        type: string
      value:
        description: Value secret item value.
        type: string
    type: object
  service.DeleteServiceRequest:
    properties:
      clusterId:
        description: ClusterID Kubernetes 集群ID.
        type: string
      name:
        description: Name Service 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间
        type: string
    type: object
  tool.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  user.CreateRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /v1/addon/mysql5/cluster/create:
    post:
      consumes:
      - application/json
      description: 创建MySQL V5集群
      parameters:
      - description: 创建 MySQL V5集群所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql5.ClusterOptions'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建MySQL V5集群
      tags:
      - add-on
  /v1/addon/mysql5/cluster/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定的MySQL V5集群
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql5.DeleteClusterOptions'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定的MySQL V5集群
      tags:
      - add-on
  /v1/addon/mysql5/operator:
    delete:
      consumes:
      - application/json
      description: 从Kubernetes集群中删除MySQL V5 Operator.
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 从Kubernetes集群中删除MySQL V5 Operator.
      tags:
      - add-on
    post:
      consumes:
      - application/json
      description: 在Kubernetes集群中安装 MySQL V5 Operator.
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 在Kubernetes集群中安装 MySQL V5 Operator.
      tags:
      - add-on
  /v1/addon/postgres/operator:
    delete:
      consumes:
      - application/json
      description: 从Kubernetes集群中删除Postgres Operator.
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 从Kubernetes集群中删除Postgres Operator.
      tags:
      - add-on
    post:
      consumes:
      - application/json
      description: 在Kubernetes集群中安装 Postgres Operator.
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 在Kubernetes集群中安装 Postgres Operator.
      tags:
      - add-on
  /v1/addon/postgresql/cluster/create:
    post:
      consumes:
      - application/json
      description: 创建 Postgresql 集群
      parameters:
      - description: 创建 Postgresql 集群参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/postgres.CreateClusterOptions'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 Postgresql 集群
      tags:
      - add-on
  /v1/helm/charts:
    get:
      consumes:
      - application/json
      description: 获取指定chart的详细信息
      parameters:
      - description: 指定chart的name
        in: query
        name: chart
        required: true
        type: string
      - description: 指定想要获取的信息：readme/values/chart
        in: query
        name: info
        required: true
        type: string
      - description: 指定想要获取信息的chart的版本
        in: query
        name: version
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取指定chart的详细信息
      tags:
      - helm
  /v1/helm/envs:
    get:
      consumes:
      - application/json
      description: 获取指定Helm的Envs信息
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取指定Helm的Envs信息
      tags:
      - helm
  /v1/helm/namespaces/{namespace}/releases:
    get:
      consumes:
      - application/json
      description: 获取releases列表
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取releases列表
      tags:
      - helm
  /v1/helm/namespaces/{namespace}/releases/{release}:
    get:
      consumes:
      - application/json
      description: 获取指定release的详细信息
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      - description: release名
        in: path
        name: release
        required: true
        type: string
      - description: info:待获取信息的类型，可选值[all,hooks,manifest,notes,values]
        in: query
        name: info
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取指定release的详细信息
      tags:
      - helm
  /v1/helm/repositories:
    put:
      consumes:
      - application/json
      description: 更新Helm的Repository信息
      parameters:
      - description: 更新Helm Repositories信息所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/config.HelmConfig'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 更新Helm的Repository信息
      tags:
      - helm
  /v1/helm/repositories/charts:
    get:
      consumes:
      - application/json
      description: 获取Helm的Repo中的Chart列表
      parameters:
      - description: chart version
        in: query
        name: version
        type: string
      - description: if true, all versions
        in: query
        name: versions
        type: string
      - description: search keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"mmessage":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取Helm的Repo中的Chart列表
      tags:
      - helm
  /v1/resource/configmap/create:
    post:
      consumes:
      - application/json
      description: 创建 ConfigMap 对象
      parameters:
      - description: 创建 ConfigMap 对象时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/configmap.CreateConfigMapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 ConfigMap 对象
      tags:
      - resource
  /v1/resource/configmap/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 ConfigMap 对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/configmap.DeleteConfigMapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 ConfigMap 对象
      tags:
      - resource
  /v1/resource/configmap/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 ConfigMap 对象的详情
      parameters:
      - description: ConfigMap 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 ConfigMap 对象的详情
      tags:
      - resource
  /v1/resource/configmap/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 ConfigMap 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 ConfigMap 对象
      tags:
      - resource
  /v1/resource/container/logs/{namespace}/{podId}/{containerId}:
    get:
      description: 获取某一 Container 对象的 Logs.
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      - description: PodID
        in: path
        name: podId
        required: true
        type: string
      - description: Container
        in: path
        name: containerId
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一 Container 对象的 Logs.
      tags:
      - resource
  /v1/resource/cronjob/create:
    post:
      consumes:
      - application/json
      description: 创建 CronJob 对象
      parameters:
      - description: 创建 CronJob 对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cronjob.CreateCronJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 CronJob 对象
      tags:
      - resource
  /v1/resource/cronjob/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 CronJob 对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cronjob.DeleteCronJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 CronJob 对象
      tags:
      - resource
  /v1/resource/cronjob/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 CronJob 对象的详情
      parameters:
      - description: CronJob 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 CronJob 对象的详情
      tags:
      - resource
  /v1/resource/cronjob/list/{namespace}:
    get:
      description: 获取某一用户空间下的所有 CronJob 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户空间下的所有 CronJob 对象
      tags:
      - resource
  /v1/resource/deployment/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Deployment对象.
      parameters:
      - description: 删除一个Deployment对象时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/deployment.DeleteDeploymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Deployment对象.
      tags:
      - resource
  /v1/resource/deployment/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Deployment 对象的详情
      parameters:
      - description: Deployment 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Deployment 对象的详情
      tags:
      - resource
  /v1/resource/deployment/list/{namespace}:
    get:
      description: 获取某一用户创建的所有 Deployment 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有 Deployment 对象
      tags:
      - resource
  /v1/resource/deployment/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Deployment 对象控制的Pods列表
      parameters:
      - description: Deployment 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Deployment 对象控制的Pods列表
      tags:
      - resource
  /v1/resource/job/create:
    post:
      consumes:
      - application/json
      description: 创建Job对象
      parameters:
      - description: 创建Job对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/job.CreateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建Job对象
      tags:
      - resource
  /v1/resource/job/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Job对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/job.DeleteJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Job对象
      tags:
      - resource
  /v1/resource/job/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一Job对象的详情
      parameters:
      - description: Job对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一Job对象的详情
      tags:
      - resource
  /v1/resource/job/list/{namespace}:
    get:
      description: 获取某一用户创建的所有Job对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有Job对象
      tags:
      - resource
  /v1/resource/job/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一Job对象控制的Pods列表
      parameters:
      - description: Job对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一Job对象控制的Pods列表
      tags:
      - resource
  /v1/resource/persistentvolumeclaim/create:
    post:
      consumes:
      - application/json
      description: 创建PersistentVolumeClaim对象
      parameters:
      - description: 创建PersistentVolumeClaim对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/persistentvolumeclaim.CreatePersistentVolumeClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建PersistentVolumeClaim对象
      tags:
      - resource
  /v1/resource/persistentvolumeclaim/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定的PersistentVolumeClaim对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/persistentvolumeclaim.DeletePersistentVolumeClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定的PersistentVolumeClaim对象
      tags:
      - resource
  /v1/resource/persistentvolumeclaim/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一PersistentVolumeClaim对象的详情
      parameters:
      - description: PersistentVolumeClaim对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一PersistentVolumeClaim对象的详情
      tags:
      - resource
  /v1/resource/persistentvolumeclaim/list/{namespace}:
    get:
      description: 获取某一用户创建的所有PersistentVolumeClaim对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有PersistentVolumeClaim对象
      tags:
      - resource
  /v1/resource/pod/container/{podId}/{namespace}:
    get:
      description: 获取某一 Pod 中的所有容器对象.
      parameters:
      - description: Pod ID
        in: path
        name: podId
        required: true
        type: string
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一 Pod 中的所有容器对象.
      tags:
      - resource
  /v1/resource/pod/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Pod 对象的详情
      parameters:
      - description: Pod 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Pod 对象的详情
      tags:
      - resource
  /v1/resource/pod/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 Pod 对象
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 Pod 对象
      tags:
      - resource
  /v1/resource/secret/create:
    post:
      consumes:
      - application/json
      description: 创建 Secret 对象
      parameters:
      - description: 创建 Secret 对象时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/secret.CreateSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 Secret 对象
      tags:
      - resource
  /v1/resource/secret/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Secret对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/secret.DeleteSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Secret对象
      tags:
      - resource
  /v1/resource/secret/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Secret 对象的详情
      parameters:
      - description: Secret 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Secret 对象的详情
      tags:
      - resource
  /v1/resource/secret/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 Secret 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 Secret 对象
      tags:
      - resource
  /v1/resource/service/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 Service 对象
      parameters:
      - description: 删除 Service 对象时所需的参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/service.DeleteServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 Service 对象
      tags:
      - resource
  /v1/resource/service/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Service 对象的详情
      parameters:
      - description: Service 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Service 对象的详情
      tags:
      - resource
  /v1/resource/service/list/{namespace}:
    get:
      description: 获取某一用户创建的所有 Service 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有 Service 对象
      tags:
      - resource
  /v1/resource/service/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Service 对象对应的Pods列表
      parameters:
      - description: Service 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Service 对象对应的Pods列表
      tags:
      - resource
  /v1/resource/storageclass/detail/{name}:
    get:
      consumes:
      - application/json
      description: 查询某一 StorageClass 对象的详情.
      parameters:
      - description: StorageClass 对象名称
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 StorageClass 对象的详情.
      tags:
      - resource
  /v1/resource/storageclass/list:
    get:
      description: 获取某一用户创建的所有Job对象
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取所有 StorageClass 对象列表.
      tags:
      - resource
  /v1/user:
    post:
      consumes:
      - application/json
      description: 创建 User 对象
      parameters:
      - description: 创建 User 对象时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 User 对象
      tags:
      - user
swagger: "2.0"
