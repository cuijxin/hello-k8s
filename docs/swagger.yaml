definitions:
  atomservice.CreateAtomServiceResponse:
    properties:
      deployment:
        description: Deployment deployment对象名称.
        type: string
      namespace:
        description: Namespace 命名空间
        type: string
      service:
        description: Service service对象名称.
        type: string
    type: object
  atomservice.ScaleAtomServiceRequest:
    properties:
      name:
        description: Name Atom自定义服务名称.
        type: string
      namespace:
        description: Namespace Atom自定义服务所在命名空间.
        type: string
      replicas:
        description: Replicas 弹性伸缩参数.
        type: integer
    type: object
  atomservice.UpdateAtomServiceImage:
    properties:
      image:
        description: Image 镜像名称（repo/镜像名:tag）
        type: string
      name:
        description: Name Atom自定义服务名称.
        type: string
      namespace:
        description: Namespace Atom自定义服务所在命名空间.
        type: string
    type: object
  buildimage.CreateBuildImageRequest:
    properties:
      context:
        description: ContextPath 镜像构建上下文所在目录名
        type: string
      name:
        description: Name 构建 Docker 镜像的 Pod 的名称
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
      pvcname:
        description: PersistentVolumeClaimName 持久化卷声明名称.
        type: string
      repository:
        description: Repository 镜像仓库路径
        type: string
      tag:
        description: ImageTag 镜像tag
        type: string
    type: object
  clonecode.CreateCloneCodeJobRequest:
    properties:
      codevolume:
        description: CodePersistentVolumeClaim 代码持久化卷声明.
        type: string
      githubRepoBranchOrTagName:
        description: GithubRepoBranchOrTagName github 仓库分支名/tag名
        type: string
      githubauth:
        $ref: '#/definitions/clonecode.GithubAuth'
        description: GithubAuth github auth信息.
        type: object
      githubrepourl:
        description: GithubRepo github 仓库名称
        type: string
      name:
        description: Name 克隆代码Job的名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  clonecode.GithubAuth:
    properties:
      token:
        description: Token github用户token.
        type: string
    type: object
  configmap.ConfigMapItem:
    properties:
      key:
        description: Key 配置项的 Key.
        type: string
      value:
        description: Value 配置项的 Value. 目前只支持base64格式编码的字符串.
        type: string
    type: object
  configmap.CreateConfigMapRequest:
    properties:
      item:
        description: ConfigMapItems 配置项数组.
        items:
          $ref: '#/definitions/configmap.ConfigMapItem'
        type: array
      name:
        description: Name ConfigMap对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  configmap.DeleteConfigMapRequest:
    properties:
      name:
        description: ConfigMap 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  cronjob.CreateCronJobRequest:
    properties:
      cronjob:
        $ref: '#/definitions/cronjob.CronJobArgs'
        type: object
      name:
        description: Name CronJob 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  cronjob.CronJobArgs:
    properties:
      jobTemplate:
        $ref: '#/definitions/model.JobArgs'
        type: object
      schedule:
        description: The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        type: string
    type: object
  cronjob.DeleteCronJobRequest:
    properties:
      name:
        description: CronJob 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  deployment.AppDeploymentSpec:
    properties:
      configmaps:
        description: List of user-defined configmap variables.
        items:
          $ref: '#/definitions/deployment.ConfigVariable'
        type: array
      containerCommand:
        description: Command that is executed instead of container entrypoint, if
          specified.
        type: string
      containerCommandArgs:
        description: |-
          Arguments for the specified container command or container entrypoint (if command is not
          specified here).
        type: string
      containerImage:
        description: Docker image path for the application.
        type: string
      cpuRequirement:
        description: Optional CPU requirement for the container.
        type: number
      description:
        description: Description of the deployment.
        type: string
      imagePullSecret:
        description: The name of an image pull secret in case of a private docker
          repository.
        type: string
      isExternal:
        description: Whether the created service is external.
        type: boolean
      isLoadBalancer:
        description: Whether the created service is Loadbalancer type
        type: boolean
      labels:
        description: Labels that will be defined on Pods/RCs/Services
        items:
          $ref: '#/definitions/deployment.Label'
        type: array
      memoryRequirement:
        description: Optional memory requirement for the container.
        type: number
      name:
        description: Name of the application.
        type: string
      namespace:
        description: Target namespace of the application.
        type: string
      portMappings:
        description: |-
          Port mappings for the service that is created. The service is created if there is at least
          one port mapping.
        items:
          $ref: '#/definitions/deployment.PortMapping'
        type: array
      pvcs:
        description: List of user-defined PersistentVolumeClaim variables.
        items:
          $ref: '#/definitions/deployment.PersistentVolumeClaimVariable'
        type: array
      replicas:
        description: Number of replicas of the image to maintain.
        type: integer
      runAsPrivileged:
        description: Whether to run the container as privileged user (essentially
          equivalent to root on the host).
        type: boolean
      variables:
        description: List of user-defined environment variables.
        items:
          $ref: '#/definitions/deployment.EnvironmentVariable'
        type: array
    type: object
  deployment.ConfigVariable:
    properties:
      mountPath:
        description: MountPath 配置文件挂载路径，代表这个服务如果想要成功运行，需要到那个路径下去获取这个配置文件.
        type: string
      name:
        description: Name 一个ConfigMap对象的名称，必须是与应用同命名空间下的一个可用ConfigMap对象的名称.
        type: string
      readOnly:
        description: ReadOnly
        type: boolean
    type: object
  deployment.DeleteDeploymentRequest:
    properties:
      name:
        description: Name Deployment对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  deployment.EnvironmentVariable:
    properties:
      name:
        description: Name of the variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: Value of the variable, as defined in Kubernetes core API.
        type: string
    type: object
  deployment.Label:
    properties:
      key:
        description: Label key
        type: string
      value:
        description: Label value
        type: string
    type: object
  deployment.PersistentVolumeClaimVariable:
    properties:
      mountPath:
        description: MountPath 持久化存储挂载路径.
        type: string
      name:
        description: Name 一个 PersistentVolumeClaim 对象的名称，必须是与应用同命名空间下的一个可用 PersistentVolumeClaim
          对象的名称.
        type: string
      readOnly:
        description: ReadOnly
        type: boolean
    type: object
  deployment.PortMapping:
    properties:
      port:
        description: Port that will be exposed on the service.
        type: integer
      protocol:
        description: IP protocol for the mapping, e.g., "TCP" or "UDP".
        type: string
      targetPort:
        description: Docker image path for the application.
        type: integer
    type: object
  job.CreateJobRequest:
    properties:
      jobTemplate:
        $ref: '#/definitions/model.JobArgs'
        description: Job 对象参数.
        type: object
      name:
        description: Name Job 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  job.DeleteJobRequest:
    properties:
      name:
        description: Job 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  model.JobArgs:
    properties:
      activeDeadlineSeconds:
        description: |-
          Specifies the duration in seconds relative to the startTime that the job may be active
          before the system tries to terminate it; value must be positive integer
          +optional
        type: integer
      completions:
        description: |-
          Specifies the desired number of successfully finished pods the
          job should be run with.  Setting to nil means that the success of any
          pod signals the success of all pods, and allows parallelism to have any positive
          value.  Setting to 1 means that parallelism is limited to 1 and the success of that
          pod signals the success of the job.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
        type: integer
      parallelism:
        description: |-
          Specifies the maximum desired number of pods the job should
          run at any given time. The actual number of pods running in steady state will
          be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
          i.e. when the work left to do is less than max parallelism.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
          +optional
        type: integer
      podTemplate:
        $ref: '#/definitions/model.PodArgs'
        description: PodTemplate 定义了 Job 对象管理的 Pod 对象的定义参数.
        type: object
    type: object
  model.PodArgs:
    properties:
      configmaps:
        description: List of user-defined configmap variables.
        items:
          $ref: '#/definitions/deployment.ConfigVariable'
        type: array
      containerCommand:
        description: Command that is executed instead of container entrypoint, if
          specified.
        items:
          type: string
        type: array
      containerCommandArgs:
        description: |-
          Arguments for the specified container command or container entrypoint (if command is not
          specified here).
        items:
          type: string
        type: array
      containerImage:
        description: Docker image path for the application.
        type: string
      cpuRequirement:
        description: Optional CPU requirement for the container.
        type: number
      labels:
        description: Labels that will be defined on Pods/RCs/Services
        items:
          $ref: '#/definitions/deployment.Label'
        type: array
      memoryRequirement:
        description: Optional memory requirement for the container.
        type: number
      pvcs:
        description: List of user-defined PersistentVolumeClaim variables.
        items:
          $ref: '#/definitions/deployment.PersistentVolumeClaimVariable'
        type: array
      restartPolicy:
        description: |-
          Restart policy for all containers within the pod.
          One of Always, OnFailure, Never.
        type: string
      variables:
        description: List of user-defined environment variables.
        items:
          $ref: '#/definitions/deployment.EnvironmentVariable'
        type: array
    type: object
  mysql.CreateClusterRequest:
    properties:
      name:
        description: Name MySQL集群名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
      template:
        $ref: '#/definitions/mysql.MySQLClusterTemplate'
        description: Template mysql cluster template.
        type: object
    type: object
  mysql.CreateOperatorRequest:
    properties:
      namespace:
        description: Namespace Mysql Operator 安装在哪个命名空间之下.
        type: string
    type: object
  mysql.DeleteClusterRequest:
    properties:
      name:
        description: MySQL 集群名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  mysql.DeleteOperatorRequest:
    properties:
      namespace:
        description: Namespace Mysql Operator 组件安装在哪个命名空间之下.
        type: string
    type: object
  mysql.MySQLClusterTemplate:
    properties:
      members:
        description: Members defines the number of MySQL instances in a cluster
        type: integer
    type: object
  persistentvolumeclaim.CreatePersistentVolumeClaimRequest:
    properties:
      AccessModes:
        description: AccessModes 存储的访问模式.
        items:
          type: string
        type: array
      name:
        description: Name PersistentVolumeClaim对象名称
        type: string
      namespace:
        description: Namespace 命名空间
        type: string
      storageCapacity:
        description: StorageCapacity 申请存储容量.
        type: number
      storageClassName:
        description: StoraegClassName 存储类名称.
        type: string
    type: object
  persistentvolumeclaim.DeletePersistentVolumeClaimRequest:
    properties:
      name:
        description: Secret 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  pgsql.CreateClusterRequest:
    properties:
      ClusterName:
        type: string
      Databases:
        additionalProperties:
          type: string
        type: object
      Namespace:
        type: string
      Postgresql:
        $ref: '#/definitions/pgsql.PostgresqlParam'
        type: object
      Replicas:
        type: integer
      TeamId:
        type: string
      Users:
        additionalProperties:
          $ref: '#/definitions/pgsql.UserFlags'
        type: object
      Volume:
        $ref: '#/definitions/pgsql.Volume'
        type: object
    type: object
  pgsql.CreateClusterResponse:
    properties:
      ClusterName:
        type: string
      Databases:
        additionalProperties:
          type: string
        type: object
      Namespace:
        type: string
      Postgresql:
        $ref: '#/definitions/pgsql.PostgresqlParam'
        type: object
      Replicas:
        type: integer
      TeamId:
        type: string
      Users:
        additionalProperties:
          $ref: '#/definitions/pgsql.UserFlags'
        type: object
      Volume:
        $ref: '#/definitions/pgsql.Volume'
        type: object
    type: object
  pgsql.CreateOpeartorRequest:
    properties:
      ClusterRoleBindingName:
        type: string
      ClusterRoleName:
        type: string
      ConfigMapName:
        type: string
      DeploymentName:
        type: string
      Namespace:
        type: string
      PostgresqlOperatorImage:
        type: string
      serviceAccountName:
        type: string
    type: object
  pgsql.CreateOperatorResponse:
    properties:
      ClusterRoleBindingName:
        type: string
      ClusterRoleName:
        type: string
      ConfigMapName:
        type: string
      DeploymentName:
        type: string
      Namespace:
        type: string
      serviceAccountName:
        type: string
    type: object
  pgsql.DeleteClusterRequest:
    properties:
      ClusterName:
        type: string
      Namespace:
        type: string
    type: object
  pgsql.PostgresqlParam:
    properties:
      parameters:
        additionalProperties:
          type: string
        type: object
      version:
        type: string
    type: object
  pgsql.UserFlags:
    items:
      type: string
    type: array
  pgsql.Volume:
    properties:
      Size:
        type: string
      StorageClass:
        type: string
      SubPath:
        type: string
    type: object
  redis.AuthSettings:
    properties:
      secretPath:
        type: string
    type: object
  redis.CreateClusterRequest:
    properties:
      name:
        description: RedisFailover 集群名称
        type: string
      namespace:
        description: 部署 RedisFailover 集群的命名空间
        type: string
      redisfailover:
        $ref: '#/definitions/redis.RedisFailover'
        description: RedisFailover 集群定义
        type: object
    type: object
  redis.CreateOperatorRequest:
    properties:
      namespace:
        type: string
    type: object
  redis.DeleteClusterRequest:
    properties:
      name:
        description: RedisFailover 集群名称
        type: string
      namespace:
        description: 部署 RedisFailover 集群的命名空间
        type: string
    type: object
  redis.DeleteOperatorRequest:
    properties:
      namespace:
        type: string
    type: object
  redis.RedisCommandRename:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  redis.RedisExporter:
    properties:
      enabled:
        type: boolean
      image:
        type: string
      imagePullPolicy:
        type: string
    type: object
  redis.RedisFailover:
    properties:
      spec:
        $ref: '#/definitions/redis.RedisFailoverSpec'
        type: object
    type: object
  redis.RedisFailoverSpec:
    properties:
      auth:
        $ref: '#/definitions/redis.AuthSettings'
        type: object
      labelWhitelist:
        items:
          type: string
        type: array
      redis:
        $ref: '#/definitions/redis.RedisSettings'
        type: object
      sentinel:
        $ref: '#/definitions/redis.SentinelSettings'
        type: object
    type: object
  redis.RedisSettings:
    properties:
      affinity:
        type: string
      command:
        items:
          type: string
        type: array
      customCommandRenames:
        items:
          $ref: '#/definitions/redis.RedisCommandRename'
        type: array
      customConfig:
        items:
          type: string
        type: array
      dnsPolicy:
        type: string
      exporter:
        $ref: '#/definitions/redis.RedisExporter'
        type: object
      hostNetwork:
        type: boolean
      image:
        type: string
      imagePullPolicy:
        type: string
      imagePullSecrets:
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        type: object
      podAnnotations:
        additionalProperties:
          type: string
        type: object
      replicas:
        type: integer
      resources:
        type: string
      securityContext:
        type: string
      serviceAnnotations:
        additionalProperties:
          type: string
        type: object
      shutdownConfigMap:
        type: string
      storage:
        $ref: '#/definitions/redis.RedisStorage'
        type: object
      tolerations:
        type: string
    type: object
  redis.RedisStorage:
    properties:
      emptyDir:
        type: string
      keepAfterDeletion:
        type: boolean
      persistentVolumeClaim:
        type: string
    type: object
  redis.SentinelExporter:
    properties:
      enabled:
        type: boolean
      image:
        type: string
      imagePullPolicy:
        type: string
    type: object
  redis.SentinelSettings:
    properties:
      affinity:
        type: string
      command:
        items:
          type: string
        type: array
      customConfig:
        items:
          type: string
        type: array
      dnsPolicy:
        type: string
      exporter:
        $ref: '#/definitions/redis.SentinelExporter'
        type: object
      hostNetwork:
        type: boolean
      image:
        type: string
      imagePullPolicy:
        type: string
      imagePullSecrets:
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        type: object
      podAnnotations:
        additionalProperties:
          type: string
        type: object
      replicas:
        type: integer
      resources:
        type: string
      securityContext:
        type: string
      serviceAnnotations:
        additionalProperties:
          type: string
        type: object
      tolerations:
        type: string
    type: object
  secret.CreateSecretRequest:
    properties:
      item:
        description: SecretItems Secret 信息
        items:
          $ref: '#/definitions/secret.SecretItem'
        type: array
      name:
        description: Name Secret 对象的名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  secret.DeleteSecretRequest:
    properties:
      name:
        description: Name Secret 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间.
        type: string
    type: object
  secret.SecretItem:
    properties:
      key:
        description: Key secret item key.
        type: string
      value:
        description: Value secret item value.
        type: string
    type: object
  service.DeleteServiceRequest:
    properties:
      clusterId:
        description: ClusterID Kubernetes 集群ID.
        type: string
      name:
        description: Name Service 对象名称.
        type: string
      namespace:
        description: Namespace 命名空间
        type: string
    type: object
  tool.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
info:
  contact: {}
  license: {}
paths:
  /atomapp/atomservice/create:
    post:
      consumes:
      - application/json
      description: 创建Atom自定义服务.
      parameters:
      - description: 创建Atom自定义服务时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/deployment.AppDeploymentSpec'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/atomservice.CreateAtomServiceResponse'
      summary: 创建Atom自定义服务.
      tags:
      - atomapp
  /atomapp/atomservice/scale:
    post:
      consumes:
      - application/json
      description: 弹性伸缩Atom自定义服务的Pods数.
      parameters:
      - description: 弹性伸缩Atom自定义服务时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/atomservice.ScaleAtomServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 弹性伸缩Atom自定义服务的Pods数.
      tags:
      - atomapp
  /atomapp/atomservice/updateimage:
    post:
      consumes:
      - application/json
      description: 更新Atom自定义服务的镜像.
      parameters:
      - description: 更新Atom自定义服务的镜像时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/atomservice.UpdateAtomServiceImage'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 更新Atom自定义服务的镜像.
      tags:
      - atomapp
  /atomapp/buildimage/create:
    post:
      consumes:
      - application/json
      description: 创建用来构建Docker Image 的Job.
      parameters:
      - description: 创建用来构建Docker Image 的Job时所需的参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/buildimage.CreateBuildImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建用来构建Docker Image 的Job.
      tags:
      - atomapp
  /atomapp/clonecode/create:
    post:
      consumes:
      - application/json
      description: 创建构建Docker镜像的Job
      parameters:
      - description: 创建克隆代码的Job时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/clonecode.CreateCloneCodeJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建克隆Github代码的Job
      tags:
      - atomapp
  /cluster/mysqlcluster:
    delete:
      consumes:
      - application/json
      description: 删除 Kubernetes 集群中的指定的 MySQL 集群.
      parameters:
      - description: 删除 MySQL 集群时所需的参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql.DeleteClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除 Kubernetes 集群中的指定的 MySQL 集群.
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: 创建MySQL集群
      parameters:
      - description: 创建 MySQL 集群所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql.CreateClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建MySQL集群
      tags:
      - cluster
  /cluster/mysqlcluster/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询指定的 MySQL 集群信息.
      parameters:
      - description: postgres cluster name
        in: path
        name: name
        required: true
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询指定的 MySQL 集群信息.
      tags:
      - cluster
  /cluster/mysqlcluster/list/{namespace}:
    get:
      consumes:
      - application/json
      description: 获取某一命名空间下的 MySQL 集群列表.
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的 MySQL 集群列表.
      tags:
      - cluster
  /cluster/pgsqlcluster:
    delete:
      consumes:
      - application/json
      description: DeleteCluster delete postgres clsuter from the kubernetes cluster.
      parameters:
      - description: Delete postgres cluster params
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/pgsql.DeleteClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: DeleteCluster delete postgres cluster from the kubernetes cluster.
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: CreateCluster deploy postgres cluster to the kubernetes cluster.
      parameters:
      - description: Deploy pgsqloperator params
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/pgsql.CreateClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/pgsql.CreateClusterResponse'
      summary: CreateCluster deploy postgres cluster to the kubernetes cluster.
      tags:
      - cluster
  /cluster/pgsqlcluster/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: GetCluster get a postgres cluster information.
      parameters:
      - description: postgres cluster name
        in: path
        name: name
        required: true
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: GetCluster get a postgres cluster information.
      tags:
      - cluster
  /cluster/pgsqlcluster/list/{namespace}:
    get:
      consumes:
      - application/json
      description: GetClusterList get the list of the postgres cluster.
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: GetClusterList get the list of the postgres cluster.
      tags:
      - cluster
  /cluster/rediscluster:
    delete:
      consumes:
      - application/json
      description: 从Kubernetes集群中删除已经部署的RedisFailover集群.
      parameters:
      - description: 删除RedisFailover集群时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/redis.DeleteClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 从Kubernetes集群中删除已经部署的RedisFailover集群.
      tags:
      - cluster
    post:
      consumes:
      - application/json
      description: 创建RedisFailover集群.
      parameters:
      - description: 创建RedisFailover集群时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/redis.CreateClusterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建RedisFailover集群.
      tags:
      - cluster
  /cluster/rediscluster/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: GetCluster get a redis cluster information.
      parameters:
      - description: redis cluster name
        in: path
        name: name
        required: true
        type: string
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: GetCluster get a redis cluster information.
      tags:
      - cluster
  /cluster/rediscluster/list/{namespace}:
    get:
      consumes:
      - application/json
      description: GetClusterList get the list of the redis cluster.
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: GetClusterList get the list of the redis cluster.
      tags:
      - cluster
  /operator/mysqloperator:
    delete:
      consumes:
      - application/json
      description: 从Kubernetes集群中删除mysql operator组件
      parameters:
      - description: 删除MySQL Operator组件时所需的参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql.DeleteOperatorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 从Kubernetes集群中删除mysql operator组件
      tags:
      - operator
    post:
      consumes:
      - application/json
      description: 安装 mysql operator.
      parameters:
      - description: 安装MySQL Operator组件时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mysql.CreateOperatorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 安装 mysql operator.
      tags:
      - operator
  /operator/pgsqloperator:
    delete:
      consumes:
      - application/json
      description: DeleteOperator delete pgsqloperator from the kubernetes cluster
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: DeleteOperator delete pgsqloperator from the kubernetes cluster
      tags:
      - operator
    post:
      consumes:
      - application/json
      description: CreateOperator deploy pgsqloperator to the kubernetes cluster
      parameters:
      - description: Deploy pgsqloperator params
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/pgsql.CreateOpeartorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"Namespace":"defalt", "DeploymentName":
            "postgres-operator"}}'
          schema:
            $ref: '#/definitions/pgsql.CreateOperatorResponse'
      summary: CreateOperator deploy pgsqloperator to the kubernetes cluster
      tags:
      - operator
  /operator/redisoperator:
    delete:
      consumes:
      - application/json
      description: 从Kubernetes集群中删除redis operator组件
      parameters:
      - description: 删除Redis Operator组件时所需的参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/redis.DeleteOperatorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 从Kubernetes集群中删除redis operator组件
      tags:
      - operator
    post:
      consumes:
      - application/json
      description: CreateOperator 安装 redis operator.
      parameters:
      - description: 安装Redis operator所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/redis.CreateOperatorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: CreateOperator 安装 redis operator.
      tags:
      - operator
  /resource/configmap/create:
    post:
      consumes:
      - application/json
      description: 创建 ConfigMap 对象
      parameters:
      - description: 创建 ConfigMap 对象时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/configmap.CreateConfigMapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 ConfigMap 对象
      tags:
      - resource
  /resource/configmap/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 ConfigMap 对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/configmap.DeleteConfigMapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 ConfigMap 对象
      tags:
      - resource
  /resource/configmap/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 ConfigMap 对象的详情
      parameters:
      - description: ConfigMap 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 ConfigMap 对象的详情
      tags:
      - resource
  /resource/configmap/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 ConfigMap 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 ConfigMap 对象
      tags:
      - resource
  /resource/container/logs/{namespace}/{podId}/{containerId}:
    get:
      description: 获取某一 Container 对象的 Logs.
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      - description: PodID
        in: path
        name: podId
        required: true
        type: string
      - description: Container
        in: path
        name: containerId
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一 Container 对象的 Logs.
      tags:
      - resource
  /resource/cronjob/create:
    post:
      consumes:
      - application/json
      description: 创建 CronJob 对象
      parameters:
      - description: 创建 CronJob 对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cronjob.CreateCronJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 CronJob 对象
      tags:
      - resource
  /resource/cronjob/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 CronJob 对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/cronjob.DeleteCronJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 CronJob 对象
      tags:
      - resource
  /resource/cronjob/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 CronJob 对象的详情
      parameters:
      - description: CronJob 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 CronJob 对象的详情
      tags:
      - resource
  /resource/cronjob/list/{namespace}:
    get:
      description: 获取某一用户空间下的所有 CronJob 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户空间下的所有 CronJob 对象
      tags:
      - resource
  /resource/deployment/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Deployment对象.
      parameters:
      - description: 删除一个Deployment对象时所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/deployment.DeleteDeploymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Deployment对象.
      tags:
      - resource
  /resource/deployment/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Deployment 对象的详情
      parameters:
      - description: Deployment 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Deployment 对象的详情
      tags:
      - resource
  /resource/deployment/list/{namespace}:
    get:
      description: 获取某一用户创建的所有 Deployment 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有 Deployment 对象
      tags:
      - resource
  /resource/deployment/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Deployment 对象控制的Pods列表
      parameters:
      - description: Deployment 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Deployment 对象控制的Pods列表
      tags:
      - resource
  /resource/job/create:
    post:
      consumes:
      - application/json
      description: 创建Job对象
      parameters:
      - description: 创建Job对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/job.CreateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建Job对象
      tags:
      - resource
  /resource/job/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Job对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/job.DeleteJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Job对象
      tags:
      - resource
  /resource/job/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一Job对象的详情
      parameters:
      - description: Job对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一Job对象的详情
      tags:
      - resource
  /resource/job/list/{namespace}:
    get:
      description: 获取某一用户创建的所有Job对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有Job对象
      tags:
      - resource
  /resource/job/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一Job对象控制的Pods列表
      parameters:
      - description: Job对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一Job对象控制的Pods列表
      tags:
      - resource
  /resource/persistentvolumeclaim/create:
    post:
      consumes:
      - application/json
      description: 创建PersistentVolumeClaim对象
      parameters:
      - description: 创建PersistentVolumeClaim对象所需参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/persistentvolumeclaim.CreatePersistentVolumeClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建PersistentVolumeClaim对象
      tags:
      - resource
  /resource/persistentvolumeclaim/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定的PersistentVolumeClaim对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/persistentvolumeclaim.DeletePersistentVolumeClaimRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定的PersistentVolumeClaim对象
      tags:
      - resource
  /resource/persistentvolumeclaim/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一PersistentVolumeClaim对象的详情
      parameters:
      - description: PersistentVolumeClaim对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一PersistentVolumeClaim对象的详情
      tags:
      - resource
  /resource/persistentvolumeclaim/list/{namespace}:
    get:
      description: 获取某一用户创建的所有PersistentVolumeClaim对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有PersistentVolumeClaim对象
      tags:
      - resource
  /resource/pod/container/{podId}/{namespace}:
    get:
      description: 获取某一 Pod 中的所有容器对象.
      parameters:
      - description: Pod ID
        in: path
        name: podId
        required: true
        type: string
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一 Pod 中的所有容器对象.
      tags:
      - resource
  /resource/pod/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Pod 对象的详情
      parameters:
      - description: Pod 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Pod 对象的详情
      tags:
      - resource
  /resource/pod/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 Pod 对象
      parameters:
      - description: 命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 Pod 对象
      tags:
      - resource
  /resource/secret/create:
    post:
      consumes:
      - application/json
      description: 创建 Secret 对象
      parameters:
      - description: 创建 Secret 对象时所需参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/secret.CreateSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 创建 Secret 对象
      tags:
      - resource
  /resource/secret/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定Secret对象
      parameters:
      - description: 删除参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/secret.DeleteSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定Secret对象
      tags:
      - resource
  /resource/secret/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Secret 对象的详情
      parameters:
      - description: Secret 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Secret 对象的详情
      tags:
      - resource
  /resource/secret/list/{namespace}:
    get:
      description: 获取某一命名空间下的所有 Secret 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一命名空间下的所有 Secret 对象
      tags:
      - resource
  /resource/service/delete:
    delete:
      consumes:
      - application/json
      description: 删除指定 Service 对象
      parameters:
      - description: 删除 Service 对象时所需的参数.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/service.DeleteServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 删除指定 Service 对象
      tags:
      - resource
  /resource/service/detail/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Service 对象的详情
      parameters:
      - description: Service 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Service 对象的详情
      tags:
      - resource
  /resource/service/list/{namespace}:
    get:
      description: 获取某一用户创建的所有 Service 对象
      parameters:
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取某一用户创建的所有 Service 对象
      tags:
      - resource
  /resource/service/pods/{name}/{namespace}:
    get:
      consumes:
      - application/json
      description: 查询某一 Service 对象对应的Pods列表
      parameters:
      - description: Service 对象名称
        in: path
        name: name
        required: true
        type: string
      - description: 用户的命名空间
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 Service 对象对应的Pods列表
      tags:
      - resource
  /resource/storageclass/detail/{name}:
    get:
      consumes:
      - application/json
      description: 查询某一 StorageClass 对象的详情.
      parameters:
      - description: StorageClass 对象名称
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200, "message":"OK", "data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 查询某一 StorageClass 对象的详情.
      tags:
      - resource
  /resource/storageclass/list:
    get:
      description: 获取某一用户创建的所有Job对象
      responses:
        "200":
          description: '{"code":200,"message":"OK","data":{""}}'
          schema:
            $ref: '#/definitions/tool.Response'
      summary: 获取所有 StorageClass 对象列表.
      tags:
      - resource
swagger: "2.0"
